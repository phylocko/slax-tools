version 1.0;

/*
 Created by Vladislav Pavkin. Nov 2016.
 vladislav.pavkin@gmail.com
*/

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

param $interface;
param $vlan;

var $arguments = {
    <argument> {
      <name> "interface";
      <description> "Client's interface (ae0, xe-0/0/8, etc. No subs.)";
    }

    <argument> {
      <name> "vlan";
      <description> "Vlan [wix|fvrs]";
    }
}

/* Getting a real interface */
var $interface_query = <get-interface-information> {
	 <interface-name> $interface;
}


/* Configuration template */
template config($interface, $vlan) {
    <configuration> {
        <interfaces> {
            <interface> {
                <name> $interface ;
                <unit> {
                    <name>0;
                    <family> {
                        <ethernet-switching> {
                            <port-mode> "trunk" ;
                            <vlan> {
                                <members> $vlan;
                            }
                        }
                    }
                }
            }
        }
    }
}

var $opts := {
    <commit-options> {
        <log> "Setting up vlan " _ $vlan _ " for interface " _ $interface;
    }
}


match / {
	<op-script-results> {

      /* Checking interface name */
    	if(jcs:regex("[.]", $interface))
    	{
    		<xsl:message terminate="yes"> " Wrong interface name given (don't specify subinterface)";
    	}

      /* Checking vlan name (shopuld be 'wix' or 'fvrs') */
      if(jcs:regex("(^(wix|fvrs)$)", $vlan)) { } else {
    		<xsl:message terminate="yes"> " Wrong vlan given. Use wix or fvrs";
    	}
    	expr jcs:progress(" -> vlan name is valid");

      /* Opening connection for checking physical interface existance */
    	var $conn_handle = jcs:open();

      /* Getting an interface */
      var $candidate_interface = jcs:execute($conn_handle, $interface_query);


    	if(jcs:empty($candidate_interface/physical-interface))
    	{
    		<xsl:message terminate="yes"> " Interface " _ $interface _ " appears to be missing.";
    	}
    	expr jcs:progress(" -> physical-interface check passed");


      /* Check if we have subint unit != 0, that is impossible on eth-switch ifaces */
      var $proper_name = $interface _ ".0";
      for-each($candidate_interface/physical-interface/logical-interface/name)
      {
          var $subint_name = .;
          if($proper_name == $subint_name ) { } else
          {
              <xsl:message terminate="yes"> "Interface " _ $interface _ " has non eth-switch family configured on " _ $subint_name;
          }
      }
      expr jcs:progress(" -> physical-interface nas no non-0 units configured");

      /* Check if we have eth-switch already configured on the interface */
      if(jcs:empty($candidate_interface/physical-interface/logical-interface/address-family/address-family-name))
      { } else
      {
          <xsl:message terminate="yes"> "Interface " _ $interface _ " has a " _ $candidate_interface/physical-interface/logical-interface/address-family/address-family-name _ " some family configured on unit 0\nPlease do it manually";
      }
      expr jcs:progress(" -> physical-interface nas no any family configured on unit 0");

    	var $confirmation = "Confirm that you want to apply the configuration:\n\tInterface:\t" _ $interface _ "\n\tVlan:\t\t" _ $vlan;
    	expr jcs:output($confirmation);
    	expr jcs:output("");
    	var $confirm = jcs:get-input("Apply? (y/n) ");
      if($confirm == "y")
      {
      	 expr jcs:output("Applying the configuration...");
      }
      else
      {
      	 <xsl:message terminate="yes">"You have cancelled the configuration.";
      }

      var $candidate_config = { call config($interface, $vlan); }

      expr jcs:progress(" -> Config is ready");

      var $results := {
          call jcs:load-configuration($commit-options=$opts,
          $configuration=$candidate_config,
          $connection=$conn_handle,
          $action="merge");
      }

      expr jcs:progress(" -> Load conf called");

      var $close-results = jcs:close($conn_handle);

      if(jcs:empty($results//xnm:error))
      {
          expr jcs:output("Done!");
      }
      else
      {
          var $error = "Error: " _ $results//xnm:error/message;
          expr jcs:output($error);
      }


  }
}
